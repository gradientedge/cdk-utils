on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

name: CI-Pipeline

env:
  name: CI-Pipeline

jobs:
  validate:
    name: Build & Test Package(s)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.x ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Yarn
        run: npm install -g yarn
      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache-node-modules
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
            ./app/api-destined-function/node_modules
          key: ${{ runner.os }}-${{ github.ref }}-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install Packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - name: Build Packages
        run: yarn build
      - name: Validate Documentation
        run: yarn docs
      - name: Test Packages
        run: yarn validate
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ github.event_name == 'push' && success() }}
        with:
          files: coverage/junit.xml
      - name: Publish Code Coverage
        run: npx codecov
      - uses: actions/upload-artifact@v2
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && success() }}
        with:
          name: docs-artifact
          path: ./api-docs/

  release:
    name: Release Package(s)
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && success() }}
    runs-on: ubuntu-latest
    needs: [ validate ]
    strategy:
      matrix:
        node-version: [ 14.x ]
    env:
      GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.GIT_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Yarn
        run: npm install -g yarn
      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache-node-modules
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
            ./app/api-destined-function/node_modules
          key: ${{ runner.os }}-${{ github.ref }}-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install Packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - uses: actions/download-artifact@v2
        with:
          name: docs-artifact
          path: ./api-docs/
      - name: Build Production
        run: yarn build:production
      - name: Deploy Package(s)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
      - name: Deploy Documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          publish_dir: ./api-docs
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            docs-artifact
          failOnError: false
